#!/usr/bin/env python
#
# Copyright (C) 2014 eNovance SAS <licensing@enovance.com>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

from unittest import TestCase
from mock import patch
from managesf.controllers import utils
from managesf.tests import dummy_conf

from cookielib import CookieJar, Cookie
import json


class FakeResponse():
    def __init__(self, code, content=None, text=None, cookies=None):
        self.status_code = code
        self.content = content
        self.text = text
        self.cookies = cookies

    def json(self):
        return json.loads(self.content)


class TestUtils(TestCase):
    @classmethod
    def setupClass(cls):
        cls.conf = dummy_conf()
        utils.conf = cls.conf

    def test_auth_cookie_in_jar(self):
        jar = CookieJar()
        c = Cookie(None, 'auth_pubtkt', 12345, '80', '80', 'www.foo.bar',
                   None, None, '/', None, False, False, 'TestCookie', None,
                   None, None)
        jar.set_cookie(c)
        cookie = utils.auth_cookie_in_jar(jar)
        for k in cookie:
            self.assertEqual('auth_pubtkt', k)
            self.assertEqual(12345, cookie[k])

    def admin_auth_cookie_mock(*args, **kwargs):
        jar = CookieJar()
        c = Cookie(None, 'auth_pubtkt', 12345, '80', '80', 'www.foo.bar',
                   None, None, '/', None, False, False, 'TestCookie', None,
                   None, None)
        jar.set_cookie(c)
        cookies = {c}
        return FakeResponse(200, cookies=cookies)

    def test_admin_auth_cookie(self):
        # Let cookie be generated by admin_auth_cookie
        with patch('managesf.controllers.utils.http') as r:
            r.post = self.admin_auth_cookie_mock
            cookie = utils.admin_auth_cookie()
            for k in cookie:
                self.assertEqual('auth_pubtkt', k)
                self.assertEqual(12345, cookie[k])
        # create cookie in this function and
        # let admin_auth_cookie check and return the same
        jar = CookieJar()
        c = Cookie(None, 'auth_pubtkt', 6789, '80', '80', 'www.foo.bar',
                   None, None, '/', None, False, False, 'TestCookie', None,
                   None, None)
        jar.set_cookie(c)
        utils.conf.admin['cookiejar'] = jar
        cookie = utils.admin_auth_cookie()
        for k in cookie:
            self.assertEqual('auth_pubtkt', k)
            self.assertEqual(6789, cookie[k])

    def http_post_mock(self, *args, **kwargs):
        self.assertIn('allow_redirects', kwargs)
        self.assertEqual(kwargs['allow_redirects'], False)
        self.assertIn('cookies', kwargs)
        self.assertEqual(kwargs['cookies']['auth_pubtkt'], 12345)
        self.assertEqual(args[0], 'http://test_post')
        self.assertEqual({'Content-type': 'application/json'},
                         kwargs['headers'])
        self.assertIn('data', kwargs)
        data = json.loads(kwargs['data'])
        self.assertEqual(data['foo'], 'bar')
        return FakeResponse(201)

    def http_get_mock(self, *args, **kwargs):
        self.assertIn('allow_redirects', kwargs)
        self.assertEqual(kwargs['allow_redirects'], False)
        self.assertIn('cookies', kwargs)
        self.assertEqual(kwargs['cookies']['auth_pubtkt'], 12345)
        self.assertEqual(args[0], 'http://test_get')
        data = json.dumps({'name': 'john'})
        return FakeResponse(200, data)

    def http_delete_mock(self, *args, **kwargs):
        self.assertIn('allow_redirects', kwargs)
        self.assertEqual(kwargs['allow_redirects'], False)
        self.assertIn('cookies', kwargs)
        self.assertEqual(kwargs['cookies']['auth_pubtkt'], 12345)
        self.assertEqual(args[0], 'http://test_delete')
        return FakeResponse(200)

    def test_send_request(self):
        with patch('managesf.controllers.utils.http') as r:
            cookies = {'auth_pubtkt': 12345}
            # test post method
            r.post = self.http_post_mock
            data = json.dumps({'foo': 'bar'})
            headers = {'Content-type': 'application/json'}
            resp = utils.send_request('http://test_post', [201], method='POST',
                                      data=data, headers=headers,
                                      cookies=cookies)
            self.assertEqual(201, resp.status_code)

            # test get method
            r.get = self.http_get_mock
            resp = utils.send_request('http://test_get', [200],
                                      method='GET', cookies=cookies)
            data = resp.json()
            self.assertEqual(data['name'], 'john')
            self.assertEqual(200, resp.status_code)

            # test delete method
            r.delete = self.http_delete_mock
            resp = utils.send_request('http://test_delete', [200],
                                      method='DELETE', cookies=cookies)
            self.assertEqual(200, resp.status_code)

    def test_templates(self):
        file_name = 'project.config'
        # templates/project.config should be present in path
        check = 'templates/' + file_name
        path = utils.template(file_name)
        self.assertIn(check, path)
        # templates_project.config should be present in path
        check = 'templates_' + file_name
        path = utils.template(file_name)
        self.assertNotIn(check, path)


class TestRemoteUser(TestCase):
    @classmethod
    def setupClass(cls):
        cls.conf = dummy_conf()
        utils.conf = cls.conf
        cls.ru = utils.RemoteUser('john', 'dummy_host',
                                  sshkey_path='dummy_key')

    def test_init(self):
        opt = ['-o', 'LogLevel=ERROR', '-o', 'StrictHostKeyChecking=no',
               '-o', 'UserKnownHostsFile=/dev/null']
        ru = utils.RemoteUser('john', 'dummy_host')
        self.assertEqual(opt, ru.opt)
        self.assertEqual('john@dummy_host', ru.host)
        opt = opt + ['-i', 'dummy_key']
        ru = utils.RemoteUser('john', 'dummy_host', sshkey_path='dummy_key')
        self.assertEqual(opt, ru.opt)

    def test_exe(self):
        with patch('managesf.controllers.utils.Popen') as Popen_mock:
            p = Popen_mock.return_value
            self.ru._exe('pwd')
            Popen_mock.assert_called_once_with('pwd', stdout=-1)
            p.wait.assert_any_call()
            p.communicate.assert_any_call()

    def test_ssh(self):
        with patch('managesf.controllers.utils.RemoteUser._exe') as exe_mock:
            cmd = ['ssh'] + self.ru.opt + [self.ru.host] + ['pwd']
            self.ru._ssh('pwd')
            exe_mock.assert_called_once_with(cmd)

    def test__scpFromRemote(self):
        with patch('managesf.controllers.utils.RemoteUser._exe') as exe_mock:
            src = 'dummy_host1'
            dest = 'dummy_host2'
            src = '%s:%s' % (self.ru.host, src)
            cmd = ['scp'] + self.ru.opt + [src, dest]
            self.ru._scpFromRemote('dummy_host1', 'dummy_host2')
            exe_mock.assert_called_once_with(cmd)

    def test__scpToRemote(self):
        with patch('managesf.controllers.utils.RemoteUser._exe') as exe_mock:
            src = 'dummy_host1'
            dest = 'dummy_host2'
            dest = '%s:%s' % (self.ru.host, dest)
            cmd = ['scp'] + self.ru.opt + [src, dest]
            self.ru._scpToRemote('dummy_host1', 'dummy_host2')
            exe_mock.assert_called_once_with(cmd)
